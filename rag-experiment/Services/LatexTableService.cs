using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using rag_experiment.Models;

namespace rag_experiment.Services
{
    public class LatexTableService
    {
        private readonly string _markdownFilePath;
        
        public LatexTableService(string markdownFilePath = "experiment_results.md")
        {
            _markdownFilePath = markdownFilePath;
            
            // Ensure the directory exists
            var directory = Path.GetDirectoryName(markdownFilePath);
            if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            
            // Create the file with header if it doesn't exist
            if (!File.Exists(markdownFilePath))
            {
                InitializeMarkdownFile();
            }
        }
        
        private void InitializeMarkdownFile()
        {
            var content = new StringBuilder();
            content.AppendLine("# Experiment Results");
            content.AppendLine();
            content.AppendLine("This file is automatically generated and contains the results of all RAG experiments.");
            content.AppendLine();
            content.AppendLine("## Results Table");
            content.AppendLine();
            
            // Create the markdown table header
            content.AppendLine("| Name | Date | TopK | Precision | Recall | F1 Score | Chunk Size | Overlap | Model | Processing | Description |");
            content.AppendLine("| ---- | ---- | ---- | --------- | ------ | -------- | ---------- | ------- | ----- | ---------- | ----------- |");
            
            // Add the placeholder for experiment results
            content.AppendLine("<!-- EXPERIMENT_RESULTS -->");
            
            content.AppendLine();
            content.AppendLine("Last updated: " + DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") + " UTC");
            
            content.AppendLine();
            content.AppendLine("## LaTeX Format (for papers)");
            content.AppendLine();
            content.AppendLine("```latex");
            content.AppendLine(@"\begin{table}[]");
            content.AppendLine(@"\centering");
            content.AppendLine(@"\begin{tabular}{|l|c|c|c|c|c|c|c|c|c|c|}");
            content.AppendLine(@"\hline");
            content.AppendLine(@"\textbf{Name} & \textbf{Date} & \textbf{TopK} & \textbf{P} & \textbf{R} & \textbf{F1} & \textbf{ChunkSize} & \textbf{Overlap} & \textbf{Model} & \textbf{Text Proc.} & \textbf{Description} \\");
            content.AppendLine(@"\hline");
            content.AppendLine(@"% LATEX_EXPERIMENT_RESULTS");
            content.AppendLine(@"\hline");
            content.AppendLine(@"\end{tabular}");
            content.AppendLine(@"\caption{RAG Experiment Results}");
            content.AppendLine(@"\label{tab:experiment-results}");
            content.AppendLine(@"\end{table}");
            content.AppendLine("```");
            
            File.WriteAllText(_markdownFilePath, content.ToString());
        }
        
        public async Task AddExperimentToTableAsync(ExperimentResult experiment)
        {
            if (experiment == null)
                return;
                
            try
            {
                // Read the current content of the file
                string content = await File.ReadAllTextAsync(_markdownFilePath);
                
                // Generate the markdown row and LaTeX row for the experiment
                string markdownRow = GenerateMarkdownRow(experiment);
                string latexRow = GenerateLatexRow(experiment);
                
                // Update markdown table
                if (content.Contains("<!-- EXPERIMENT_RESULTS -->"))
                {
                    // Insert the new row after the placeholder
                    content = content.Replace("<!-- EXPERIMENT_RESULTS -->", 
                        "<!-- EXPERIMENT_RESULTS -->\n" + markdownRow);
                }
                
                // Update LaTeX table
                if (content.Contains("% LATEX_EXPERIMENT_RESULTS"))
                {
                    content = content.Replace("% LATEX_EXPERIMENT_RESULTS",
                        "% LATEX_EXPERIMENT_RESULTS\n" + latexRow);
                }
                
                // Update the "Last updated" line
                string oldUpdateLine = content.Split('\n')
                    .FirstOrDefault(line => line.StartsWith("Last updated:"));
                
                if (!string.IsNullOrEmpty(oldUpdateLine))
                {
                    string newUpdateLine = "Last updated: " + DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") + " UTC";
                    content = content.Replace(oldUpdateLine, newUpdateLine);
                }
                
                // Write the updated content back to the file
                await File.WriteAllTextAsync(_markdownFilePath, content);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating markdown table: {ex.Message}");
                // Don't throw - this is a non-critical feature
            }
        }
        
        public async Task RegenerateTableFromExperimentsAsync(List<ExperimentResult> experiments)
        {
            if (experiments == null || !experiments.Any())
                return;
                
            try
            {
                // Sort experiments by timestamp (newest first)
                experiments = experiments.OrderByDescending(e => e.Timestamp).ToList();
                
                // Read the current content of the file
                string content = await File.ReadAllTextAsync(_markdownFilePath);
                
                // Generate all markdown and LaTeX rows
                var markdownRows = new StringBuilder();
                var latexRows = new StringBuilder();
                
                foreach (var experiment in experiments)
                {
                    markdownRows.AppendLine(GenerateMarkdownRow(experiment));
                    latexRows.AppendLine(GenerateLatexRow(experiment));
                }
                
                // Replace the markdown placeholder
                if (content.Contains("<!-- EXPERIMENT_RESULTS -->"))
                {
                    content = content.Replace("<!-- EXPERIMENT_RESULTS -->", 
                        "<!-- EXPERIMENT_RESULTS -->\n" + markdownRows.ToString().TrimEnd());
                }
                
                // Replace the LaTeX placeholder
                if (content.Contains("% LATEX_EXPERIMENT_RESULTS"))
                {
                    content = content.Replace("% LATEX_EXPERIMENT_RESULTS", 
                        "% LATEX_EXPERIMENT_RESULTS\n" + latexRows.ToString().TrimEnd());
                }
                
                // Update the "Last updated" line
                string oldUpdateLine = content.Split('\n')
                    .FirstOrDefault(line => line.StartsWith("Last updated:"));
                
                if (!string.IsNullOrEmpty(oldUpdateLine))
                {
                    string newUpdateLine = "Last updated: " + DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") + " UTC";
                    content = content.Replace(oldUpdateLine, newUpdateLine);
                }
                
                // Write the updated content back to the file
                await File.WriteAllTextAsync(_markdownFilePath, content);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error regenerating markdown table: {ex.Message}");
                // Don't throw - this is a non-critical feature
            }
        }
        
        private string GenerateMarkdownRow(ExperimentResult experiment)
        {
            // Format metrics with 3 decimal places
            string precision = experiment.AveragePrecision.ToString("F3");
            string recall = experiment.AverageRecall.ToString("F3");
            string f1Score = experiment.AverageF1Score.ToString("F3");
            
            // Format date
            string formattedDate = experiment.Timestamp.ToString("yyyy-MM-dd");
            
            // Generate text processing flags
            string textProcessing = GetTextProcessingFlags(experiment);
            
            // Truncate description if needed
            string description = TruncateWithEllipsis(experiment.Description, 30);
            
            // Escape pipe characters for markdown tables
            string escapedName = experiment.ExperimentName.Replace("|", "\\|");
            string escapedDescription = description.Replace("|", "\\|");
            string escapedModel = experiment.EmbeddingModelName.Replace("|", "\\|");
            
            // Build the markdown table row
            return $"| {escapedName} | {formattedDate} | {experiment.TopK} | {precision} | {recall} | {f1Score} | {experiment.ChunkSize} | {experiment.ChunkOverlap} | {escapedModel} | {textProcessing} | {escapedDescription} |";
        }
        
        private string GenerateLatexRow(ExperimentResult experiment)
        {
            // Escape special LaTeX characters
            string escapedName = EscapeLatex(experiment.ExperimentName);
            string escapedDescription = EscapeLatex(TruncateWithEllipsis(experiment.Description, 30));
            string escapedModel = EscapeLatex(experiment.EmbeddingModelName);
            
            // Format date
            string formattedDate = experiment.Timestamp.ToString("yyyy-MM-dd");
            
            // Format metrics with 3 decimal places
            string precision = experiment.AveragePrecision.ToString("F3");
            string recall = experiment.AverageRecall.ToString("F3");
            string f1Score = experiment.AverageF1Score.ToString("F3");
            
            // Generate text processing flags
            string textProcessing = GetTextProcessingFlags(experiment);
            
            // Build the LaTeX row
            return $"{escapedName} & {formattedDate} & {experiment.TopK} & {precision} & {recall} & {f1Score} & {experiment.ChunkSize} & {experiment.ChunkOverlap} & {escapedModel} & {textProcessing} & {escapedDescription} \\\\";
        }
        
        private string GetTextProcessingFlags(ExperimentResult experiment)
        {
            var flags = new List<string>();
            
            if (experiment.StopwordRemoval) flags.Add("SW");
            if (experiment.Stemming) flags.Add("ST");
            if (experiment.Lemmatization) flags.Add("LM");
            if (experiment.QueryExpansion) flags.Add("QE");
            
            return flags.Count > 0 ? string.Join(",", flags) : "none";
        }
        
        private string EscapeLatex(string text)
        {
            if (string.IsNullOrEmpty(text))
                return "";
                
            return text
                .Replace("\\", "\\textbackslash")
                .Replace("&", "\\&")
                .Replace("%", "\\%")
                .Replace("$", "\\$")
                .Replace("#", "\\#")
                .Replace("_", "\\_")
                .Replace("{", "\\{")
                .Replace("}", "\\}")
                .Replace("^", "\\^")
                .Replace("~", "\\~")
                .Replace("|", "\\|");
        }
        
        private string TruncateWithEllipsis(string text, int maxLength)
        {
            if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
                return text;
                
            return text.Substring(0, maxLength - 3) + "...";
        }
    }
} 