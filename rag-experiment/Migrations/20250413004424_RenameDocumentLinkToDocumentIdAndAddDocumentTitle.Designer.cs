// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rag_experiment.Services;

#nullable disable

namespace rag_experiment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250413004424_RenameDocumentLinkToDocumentIdAndAddDocumentTitle")]
    partial class RenameDocumentLinkToDocumentIdAndAddDocumentTitle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("rag_experiment.Models.Embedding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("EmbeddingData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Embeddings");
                });

            modelBuilder.Entity("rag_experiment.Models.ExperimentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageF1Score")
                        .HasColumnType("REAL");

                    b.Property<double>("AveragePrecision")
                        .HasColumnType("REAL");

                    b.Property<double>("AverageRecall")
                        .HasColumnType("REAL");

                    b.Property<int>("ChunkOverlap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChunkSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DetailedResults")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmbeddingDimension")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmbeddingModelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExperimentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Lemmatization")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("QueryExpansion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Stemming")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StopwordRemoval")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("TopK")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ExperimentResults");
                });
#pragma warning restore 612, 618
        }
    }
}
